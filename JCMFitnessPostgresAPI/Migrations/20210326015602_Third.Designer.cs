// <auto-generated />
using System;
using JCMFitnessPostgresAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JCMFitnessPostgresAPI.Migrations
{
    [DbContext(typeof(ApiDBContext))]
    [Migration("20210326015602_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.Exercise", b =>
                {
                    b.Property<string>("ExerciseID")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Repititions")
                        .HasColumnType("integer");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<int>("TimerValue")
                        .HasColumnType("integer");

                    b.HasKey("ExerciseID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.UserWorkout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("WorkoutID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkoutID");

                    b.ToTable("UserWorkouts");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.Workout", b =>
                {
                    b.Property<string>("WorkoutID")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("WorkoutID");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.WorkoutExercises", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExerciseID")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkoutID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("WorkoutID");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.UserWorkout", b =>
                {
                    b.HasOne("JCMFitnessPostgresAPI.Models.User", "User")
                        .WithMany("UserWorkouts")
                        .HasForeignKey("UserID");

                    b.HasOne("JCMFitnessPostgresAPI.Models.Workout", "Workout")
                        .WithMany("UserWorkouts")
                        .HasForeignKey("WorkoutID");

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.WorkoutExercises", b =>
                {
                    b.HasOne("JCMFitnessPostgresAPI.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseID");

                    b.HasOne("JCMFitnessPostgresAPI.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutID");

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.User", b =>
                {
                    b.Navigation("UserWorkouts");
                });

            modelBuilder.Entity("JCMFitnessPostgresAPI.Models.Workout", b =>
                {
                    b.Navigation("UserWorkouts");

                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
